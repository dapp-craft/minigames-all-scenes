// 1 - wall
// 0 - empty
// 2 - start
// 3 - finish

import { Position } from "../BoardEngine/Types"
import { CustomCellTypes } from "./types"

const level1 = 
`11111111111111111111111111111111111111111
20000000001000001000100010000010000010001
10111111101010101010101110101011111010101
10100000101010101010001000101000001000101
10101110101010101010111011101111101111101
10100010101010100010100010101000100000001
10111110101110111111101110101110111111101
10000010101000100000100010101000001000101
10111010101011101110111010101011101011101
10100010101000000010100010101000100010001
11101110101111111010101110101010111010111
10001000100000001010100010101010100010001
10111110111111101110111010101010111011101
10100000001000000000001000101010001000101
10111010111011111111111011101011101011101
10001010100010000010000010001000101010001
11101010101110111010111110111011101010111
10001010101000101000100010001010001010001
10111011101011101111101011101010111111101
10001000001010000010001000101010100000001
11101111101011101011111010101010101111111
10001000101000001000001010101010100010001
10111010111111111111101010101010111010101
10001010000010000000100010101010100010101
11101011101010111111111011101110101111101
10001010101000100000000010001000100000001
10111010101111101111111110111010111111101
10000010100000001010000000100010001000001
10111110111111111010111111101111101011111
10100000001000001010000010000000101010001
10111011111010101011111011101110101011101
10001010000010101000001000101000101010001
11101010111110101010111110111011101010111
10001000000010100010100000100010101010001
10111111111110101111101111101110101011101
10001000100000101000001000001000101000001
11101010101111101011111110111011101111101
10100010001000101000000010001000000000101
10111111111010101111111010101111111111101
10000000000010000000100010100000000000003
11111111111111111111111111111111111111111`

type Level = {
    board: CustomCellTypes[][],
    start: Position,
    finish: Position
}

export async function loadLevel(level: number): Promise<Level> {

    // TODO: read level from file

    const levelData = level1
    const rows = levelData.trim().split('\n')
    const height = rows.length
    const width = rows[0].length
    
    const board: CustomCellTypes[][] = Array(height).fill(null).map(() => Array(width).fill("Empty"))
    
    let start: Position | null = null
    let finish: Position | null = null
    
    for (let y = 0; y < height; y++) {
        const row = rows[y]
        for (let x = 0; x < width; x++) {
            const cell = row[x]
            switch (cell) {
                case '0':
                    board[y][x] = 'Empty'
                    break
                case '1':
                    board[y][x] = 'Wall'
                    break
                case '2':
                    board[y][x] = 'Start' 
                    start = {x, y}
                    break
                case '3':
                    board[y][x] = 'Finish'
                    finish = {x, y}
                    break
                default:
                    throw new Error(`Invalid cell type: ${cell} at position ${x}, ${y}`)
            }
        }
    }
    

    if (!start || !finish) {
        throw new Error("Start or finish position not found")
    }

    return {
        board,
        start,
        finish
    }
}